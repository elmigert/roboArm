 [CONFIG]
#@filetype: Name of the file doesn't matter. Create a new file and add "challenge" to the file type to create a new challenge
filetype = challenge 

[challenge]
#@name: Name of the challenge displayed in the selection window
name = Brücke 1

# Adds the priority to the challenge, affects the dropdown menu. The lower the number, the higher it is up in the challenges dropdown menu.
priority = 2

#@block_types: Different types of blocks, feel free to define your own names
block_types = [One,Three]
  
#@type: adds type
# 	test:  for no solution required,
# 	challenge: Counts as challenge for the magic cube /number of solved challenges
# 	other: Any additional exercise which has a solution but does not count as a challenge
# 	- : Any unknown or not defined type will also considered as 'other'
type = challenge

#@sample_text: Add a text which will be displayed in the command window.  Use \n for a forced linebreak. Comment/uncomment (#) it to remove/add the sample text.
# sample_text = Da ist der Beispieltext des Befehlsfensters

#@description: Add a text which will be displayed in the description of the exercise. Use html formating
description = <b> Hinweise: </b>  <ul> <li>Die Bausteine müssen zu Beginn wie auf der Abbildung platziert sein, damit der Roboterarm sie aufnehmen kann. </ul> </li>


[Start_Position]
# @Possible Arguments in Start_Position: Add start positions of the blocks, feel free to name the block with any desired names, e.g. in alphabetic manner. Don't use digits only. 
# 	Name convention: BlockName = [start_x,start_y,start_z],rotation,type  (use rotation = 90 or 0) or BlockName = [start_x,start_y,start_z],type  (rotation = 0)
			
a = [4,3,1],0,One
b = [7,6,1],One
c = [5,11,1],One
d = [2,12,1],0,One
f = [3,1,1],90,Three
e = [6,6,1],0,Three

[Final_Position]
#@Possible Arguments in Final_Position The final position of the blocks. There can be less or equal numbers of final position in relation to the numbers of start positions. Similar to the startPosition, any name can be given to the blocks
#	Name convention: BlockName = [start_x,start_y,start_z],rotation,type  (use rotation = 90 or 0) or BlockName = [start_x,start_y,start_z],type  (rotation = 0)

one = [4,6,1],One
two = [4,8,1],One
three = [4,6,2],One
four = [4,8,2],One
five = [4,7,3],Three

[Block_Dimensions]
#@Possible Arguments in Block_Dimension: Add the dimensions of the blocks. Not implemented yet. 
# 	Name convention: block_type = [length_x,lenght_y]

One = [1,1]
Three = [1,3]

